  source_file 
    toplevel 
      gdeclaration 
        declaration 
          type 
            "int"
          identifier 
            `x`
          "="
          expression 
            number 
              `5`
          ";"
    toplevel 
      gdeclaration 
        declaration 
          type 
            "int"
          "*"
          identifier 
            `p`
          ";"
    toplevel 
      function_definition 
        type 
          "int"
        identifier 
          `foo`
        "("
        ")"
        block 
          "{"
          statement 
            ldeclaration 
              declaration 
                type 
                  "int"
                identifier 
                  `x`
                "="
                expression 
                  number 
                    `10`
                ";"
          statement 
            return_statement 
              "return"
              expression 
                identifier 
                  `x`
              ";"
          "}"
    toplevel 
      function_definition 
        type 
          "int"
        identifier 
          `barr`
        "("
        parameter_list 
          type 
            "int"
          "*"
          identifier 
            `a`
        ")"
        block 
          "{"
          statement 
            return_statement 
              "return"
              expression 
                pointer_access 
                  "*"
                  identifier 
                    `a`
              ";"
          "}"
    toplevel 
      function_definition 
        type 
          "void"
        identifier 
          `bar`
        "("
        parameter_list 
          type 
            "int"
          identifier 
            `b`
          ","
          type 
            "int"
          identifier 
            `c`
        ")"
        block 
          "{"
          statement 
            assignment 
              lvalue 
                identifier 
                  `x`
              "="
              expression 
                number 
                  `10`
              ";"
          "}"
    toplevel 
      function_definition 
        type 
          "int"
        identifier 
          `main`
        "("
        ")"
        block 
          "{"
          statement 
            ldeclaration 
              declaration 
                type 
                  "int"
                identifier 
                  `y`
                "="
                expression 
                  binary_expression 
                    expression 
                      function_call 
                        identifier 
                          `foo`
                        "("
                        ")"
                    "+"
                    expression 
                      number 
                        `1`
                ";"
          statement 
            ldeclaration 
              declaration 
                type 
                  "int"
                identifier 
                  `a`
                "["
                expression 
                  number 
                    `10`
                "]"
                ";"
          statement 
            ldeclaration 
              declaration 
                type 
                  "int"
                identifier 
                  `z`
                "="
                expression 
                  number 
                    `10`
                ";"
          statement 
            assignment 
              lvalue 
                array_access 
                  expression 
                    identifier 
                      `a`
                  "["
                  expression 
                    number 
                      `0`
                  "]"
              "="
              expression 
                number 
                  `5`
              ";"
          statement 
            assignment 
              lvalue 
                array_access 
                  expression 
                    identifier 
                      `a`
                  "["
                  expression 
                    number 
                      `1`
                  "]"
              "="
              expression 
                number 
                  `10`
              ";"
          statement 
            if_statement 
              "if"
              "("
              expression 
                binary_expression 
                  expression 
                    identifier 
                      `y`
                  ">"
                  expression 
                    number 
                      `5`
              ")"
              block 
                "{"
                statement 
                  assignment 
                    lvalue 
                      identifier 
                        `x`
                    "="
                    expression 
                      number 
                        `10`
                    ";"
                "}"
              "else"
              "if"
              "("
              expression 
                binary_expression 
                  expression 
                    identifier 
                      `y`
                  "<"
                  expression 
                    number 
                      `5`
              ")"
              block 
                "{"
                statement 
                  assignment 
                    lvalue 
                      identifier 
                        `x`
                    "="
                    expression 
                      number 
                        `20`
                    ";"
                "}"
          statement 
            assignment 
              lvalue 
                pointer_access 
                  "*"
                  identifier 
                    `p`
              "="
              expression 
                number 
                  `10`
              ";"
          statement 
            expression_statement 
              expression 
                function_call 
                  identifier 
                    `bar`
                  "("
                  expression 
                    number 
                      `10`
                  ","
                  expression 
                    identifier 
                      `x`
                  ")"
              ";"
          statement 
            while_statement 
              "while"
              "("
              expression 
                number 
                  `1`
              ")"
              loopBlock 
                "{"
                statement 
                  assignment 
                    lvalue 
                      identifier 
                        `x`
                    "="
                    expression 
                      binary_expression 
                        expression 
                          identifier 
                            `x`
                        "+"
                        expression 
                          number 
                            `1`
                    ";"
                statement 
                  if_statement 
                    "if"
                    "("
                    expression 
                      binary_expression 
                        expression 
                          identifier 
                            `x`
                        ">"
                        expression 
                          number 
                            `100`
                    ")"
                    block 
                      "{"
                      statement 
                        expression_statement 
                          expression 
                            identifier 
                              `break`
                          ";"
                      "}"
                "}"
          statement 
            return_statement 
              "return"
              expression 
                identifier 
                  `x`
              ";"
          "}"

